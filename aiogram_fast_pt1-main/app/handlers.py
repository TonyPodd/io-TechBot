from aiogram import F, Router
from aiogram.types import (
    Message,
    CallbackQuery,
    InputFile,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiofiles
from app.config import ADMINS_ID
import app.keyboards as kb
import app.database.requests as rq
from app.utils.utils import generate_qr_code, scan_qr_code
from pyzbar.pyzbar import decode
from PIL import Image
import io

router = Router()


class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    img = State()


class AddQRCode(StatesGroup):
    usage_limit = State()
    bonus_points = State()


class ScanQRCode(StatesGroup):
    qr_code = State()


class RegistrationState(StatesGroup):
    phone = State()
    name = State()
    # surname = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMINS_ID


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
def styled_message(text, style="info"):
    # return f"‚ÑπÔ∏è {text}
    if style == "info":
        return f"‚ÑπÔ∏è {text}"
    elif style == "error":
        return f"‚ùå {text}"
    elif style == "warning":
        return f"‚ö†Ô∏è {text}"
    elif style == "success":
        return f"‚úÖ {text}"


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == "/reg")
async def start_registration(message: Message, state: FSMContext):
    user_registered = await rq.is_user_registered(message.from_user.id)
    if user_registered:
        await message.answer(
            styled_message("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", style="warning")
        )
    else:
        await message.answer(
            styled_message("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"),
            reply_markup=kb.get_number,
        )
        await state.set_state(RegistrationState.phone)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(RegistrationState.phone)
async def process_registration_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer(
            styled_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
        )
        return

    contact = message.contact
    await state.update_data(phone=contact.phone_number)
    await message.answer(
        styled_message("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"),
        reply_markup=kb.main,
    )
    await state.set_state(RegistrationState.name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –§–ò–û
@router.message(RegistrationState.name)
async def process_registration_name(message: Message, state: FSMContext):
    full_name = message.text.split(" ")
    if len(full_name) != 3:
        await message.answer(
            styled_message("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'.")
        )
        return

    await state.update_data(
        name=full_name[1], surname=full_name[0], patronymic=full_name[2]
    )
    # print()
    data = await state.get_data()
    phone = data["phone"]
    await rq.register_user(
        message.from_user.id, full_name[1], full_name[0], full_name[2], phone
    )
    await message.answer(
        styled_message(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∫—É–ø–∫–∞–º.",
            style="success",
        )
    )
    await state.clear()


@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def ask_catalog(message: Message):
    catalog_message = (
        "üõçÔ∏è –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏–≤ –±–æ–Ω—É—Å–∞–º–∏. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )
    await message.answer(catalog_message, reply_markup=kb.show_katalog)


@router.callback_query(F.data == "show_katalog")
async def show_katalog(callback: CallbackQuery):
    items = await rq.get_all_items()
    for item in items:
        item_text = (
            f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {item.name}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {item.price}üíé"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"item_{item.id}")]
            ]
        )
        await callback.message.answer_photo(
            photo=item.img,
            caption=item_text,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )


@router.callback_query(F.data.startswith("item_"))
async def buy_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    item = await rq.get_item_by_id(item_id)

    user_balance = await rq.get_user_balance(callback.from_user.id)

    if user_balance >= item.price:
        await send_invoice(callback.bot, callback.from_user.id, item)

        await send_admin_notification(callback.bot, item, callback.from_user.id)

        await rq.set_user_balance(callback.from_user.id, user_balance - item.price)

        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞")


async def send_invoice(bot, user_id, item):
    await bot.send_message(
        user_id,
        f"‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä:\nüì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\nüíé –¶–µ–Ω–∞: {item.price}",
    )


async def send_admin_notification(bot, item, user_id):
    user = await rq.get_user_by_id(user_id)
    admin_message = f"üõí *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_id} - {user.Name} {user.Surname} {user.Patronymic} \nüì¶ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞:*\nüìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {item.name}\nüìã *–û–ø–∏—Å–∞–Ω–∏–µ:* {item.description}\nüíé *–¶–µ–Ω–∞:* {item.price}"
    for adm in ADMINS_ID:
        await bot.send_message(adm, admin_message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(Command("admin"))
async def cmd_admin_panel(message: Message):
    if is_admin(message.from_user.id):
        await message.answer(
            styled_message("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–∫—Ä—ã–≤–∞—é –¥–ª—è –≤–∞—Å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            reply_markup=kb.admin_keyboard,
        )
    else:
        await message.answer(styled_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."))


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
@router.message(F.text == "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
async def scan_qr_code_command(message: Message, state: FSMContext):
    await message.answer(styled_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ üì∑"))
    await state.set_state(ScanQRCode.qr_code)

@router.message(Command('cancel'))
async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(styled_message("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º
@router.message(ScanQRCode.qr_code)
async def handle_qr_code_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer(styled_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"))
        return

    photo_file_id = message.photo[-1].file_id
    image_data = await message.bot.get_file(photo_file_id)
    downloaded_file = await message.bot.download_file(image_data.file_path)

    file_path = f"{photo_file_id}.jpg"

    async with aiofiles.open(file_path, "wb") as new_file:
        await new_file.write(downloaded_file.read())

    qr_code_data = scan_qr_code(file_path)

    if qr_code_data:
        if "Bonus points" in qr_code_data:
            id = int(
                qr_code_data.split("Bonus points: ")[0].replace("ID: ", "").strip()
            )
            if not await rq.is_qr_code_scaned_by_user(message.from_user.id, id):
                limit = await rq.get_usage_limit_by_id(id)
                if not limit:
                    limit = 0
                if limit > 0:
                    await rq.set_usage_limit_by_id(
                        id, await rq.get_usage_limit_by_id(id) - 1
                    )
                    await message.answer(
                        styled_message(
                            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {qr_code_data.split('Bonus points: ')[1]} –±–æ–Ω—É—Å–æ–≤.",
                            style="success",
                        )
                    )
                    await rq.set_user_scanned_qr(message.from_user.id, id)
                    add_bonus = int(qr_code_data.split("Bonus points: ")[1])
                    user_balance = (
                        await rq.get_user_balance(message.from_user.id) + add_bonus
                    )
                    await rq.set_user_balance(message.from_user.id, user_balance)
                else:
                    await message.answer(
                        styled_message(
                            "–ë–æ–Ω—É—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ QR-–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", style="error"
                        )
                    )
            else:
                await message.answer(
                    styled_message(
                        "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ QR.", style="error"
                    )
                )
        else:
            await message.answer(
                styled_message("–≠—Ç–æ –Ω–µ QR-–∫–æ–¥ –±–æ–Ω—É—Å–æ–≤.", style="error")
            )
    else:
        await message.answer(
            styled_message(
                "–ù–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ QR-–∫–æ–¥–∞.", style="error"
            )
        )

    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞
async def process_qr_code(image_data):
    async with image_data.download() as file_data:
        image = Image.open(io.BytesIO(await file_data.read()))

    decoded_objects = decode(image)

    if decoded_objects:
        qr_code_data = decoded_objects[0].data.decode("utf-8")
        return qr_code_data
    else:
        return None


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def admin_add_item_command(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await state.set_state(AddProduct.name)
    await message.answer(styled_message("üõçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"))


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    await state.finish()
    await message.answer(styled_message("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.name)
async def admin_add_item_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(styled_message("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"))
    await state.set_state(AddProduct.description)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.description)
async def admin_add_item_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(styled_message("üí≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"))
    await state.set_state(AddProduct.price)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.price)
async def admin_add_item_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.answer(
            styled_message("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)")
        )
        return
    await state.update_data(price=price)
    await message.answer(styled_message("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"))
    await state.set_state(AddProduct.img)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.img)
async def admin_add_item_img(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer(styled_message("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"))
        return

    photo_file_id = message.photo[-1].file_id
    await state.update_data(img_id=photo_file_id)
    item_data = await state.get_data()
    item_card_text = (
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {item_data['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item_data['description']}\n"
        f"üí≤ –¶–µ–Ω–∞: {item_data['price']}üíé"
    )

    await message.answer_photo(
        photo=photo_file_id, caption=item_card_text, reply_markup=kb.add_item_true
    )

    await state.update_data(item_data=item_data)


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "save_item")
async def save_item_callback(callback: CallbackQuery, state: FSMContext):
    item_data = await state.get_data()
    await rq.add_item(
        name=item_data["name"],
        description=item_data["description"],
        price=item_data["price"],
        img=item_data["img_id"],
    )
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.clear()


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "cancel_add_item")
async def cancel_add_item_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer(styled_message("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"))


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_item_message(message: Message):
    if not is_admin(message.from_user.id):
        return
    items = await rq.get_all_items()
    for item in items:
        item_text = (
            f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n"
            f"üí≤ –¶–µ–Ω–∞: {item.price}üíé"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_item_{item.id}"
                    )
                ]
            ]
        )
        await message.answer_photo(
            photo=item.img, caption=item_text, reply_markup=keyboard
        )


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("delete_item_"))
async def delete_item_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    item_id = int(callback.data.split("_")[2])
    await rq.delete_item(item_id)
    await callback.answer(styled_message("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"))


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
async def add_qr_code_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await message.answer(
        styled_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è QR-–∫–æ–¥–∞:")
    )
    await state.set_state(AddQRCode.usage_limit)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥–∞
@router.message(AddQRCode.usage_limit)
async def process_usage_limit(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    try:
        usage_limit = int(message.text)
    except ValueError:
        await message.answer(styled_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."))
        return

    await state.update_data(usage_limit=usage_limit)
    await state.set_state(AddQRCode.bonus_points)
    await message.answer(
        styled_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å QR-–∫–æ–¥:")
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤ QR-–∫–æ–¥–∞
@router.message(AddQRCode.bonus_points)
async def process_bonus_points(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    try:
        bonus_points = int(message.text)
    except ValueError:
        await message.answer(styled_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."))
        return

    await state.update_data(bonus_points=bonus_points)
    qr_data = await state.get_data()
    last_qr_code_id = await rq.get_last_qr_code_id()
    generate_qr_code(last_qr_code_id + 1, qr_data["bonus_points"], "qr_code.png")
    qr_code_input_file = FSInputFile("qr_code.png", "qr_code")
    result = await message.answer_photo(
        qr_code_input_file,
        caption=styled_message("QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", style="success"),
    )
    file_id = result.photo[-1].file_id

    await rq.add_qr_code(
        usage_limit=qr_data["usage_limit"],
        bonus_points=qr_data["bonus_points"],
        qr_code_id=file_id,
    )
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    if is_admin(message.from_user.id):
        await message.answer(
            styled_message(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–∫—Ä—ã–≤–∞—é –¥–ª—è –≤–∞—Å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", style="success"
            ),
            reply_markup=kb.admin_keyboard,
        )
    else:
        await message.answer(
            styled_message(
                "–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫–æ–ø–∏—Ç—å –±–æ–Ω—É—Å—ã –∏ –æ–ø–ª–∞–∏–≤–∞—Ç—å –∏–º–∏ 100% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞"
            ),
            reply_markup=kb.main,
        )


@router.message(F.text == "–ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    user_registered = await rq.is_user_registered(message.from_user.id)
    if not user_registered:
        await message.answer(
            styled_message("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        )
        await message.answer(
            styled_message("–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
        )
        return

    balance = await rq.get_user_balance(message.from_user.id)
    await message.answer(styled_message(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}üíé"))


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: Message):
    contacts = "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\nEmail: example@example.com"
    await message.answer(styled_message(contacts))


#
